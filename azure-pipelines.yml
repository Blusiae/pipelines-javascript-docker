trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'my-container-app'
  acrName: 'ntwdkcontainersacr'
  aksClusterName: 'containers'  # Replace with your AKS cluster name
  resourceGroup: 'containers'  # Replace with your resource group name
  azureServiceConnection: 'DanielKocot'

steps:
  - script: |
      # Generate Dockerfile
      echo "Generating Dockerfile..."
      cat <<EOF > Dockerfile
      FROM node:14
      WORKDIR /usr/src/app
      COPY package*.json ./
      RUN npm install
      COPY . .
      EXPOSE 3000
      CMD ["node", "app.js"]
      EOF
    displayName: 'Generate Dockerfile'

  - task: Docker@2
    inputs:
      command: buildAndPush
      repository: $(acrName).azurecr.io/$(imageName)
      dockerfile: $(Build.SourcesDirectory)/Dockerfile
      containerRegistry: '$(azureServiceConnection)'
      tags: |
        $(Build.BuildId)

  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Get AKS credentials
        az aks get-credentials --resource-group $(resourceGroup) --name $(aksClusterName)
        
        # Create a secret for ACR
        kubectl create secret docker-registry acr-secret --docker-server=$(acrName).azurecr.io --docker-username=$(ACR_USERNAME) --docker-password=$(ACR_PASSWORD) --docker-email=$(ACR_EMAIL)
        
        # Define and apply Kubernetes deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-app
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: my-app
          template:
            metadata:
              labels:
                app: my-app
            spec:
              containers:
              - name: my-app-container
                image: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
                ports:
                - containerPort: 3000
        EOF
        
        # Define and apply Kubernetes service
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: my-app-service
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 3000
          selector:
            app: my-app
        EOF
